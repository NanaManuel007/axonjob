"""
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

directive @tag(name: String!) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION

input AssignCandidateToJobInput {
  candidateId: Long!
  jobId: Long!
}

input AssignJobInput {
  input: AssignJobRequestInput!
}

input AssignJobRequestInput {
  candidateId: Long!
  jobId: Long!
  status: AssignmentStatus! = ACTIVE
}

input AssignPermissionsInput {
  input: AssignPermissionsRequestInput!
}

input AssignPermissionsRequestInput {
  permissionNames: [String!]!
  roleId: Long!
}

enum AssignmentStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  TERMINATED
}

input AssignmentStatusOperationFilterInput {
  eq: AssignmentStatus
  in: [AssignmentStatus!]
  neq: AssignmentStatus
  nin: [AssignmentStatus!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

type CallResult {
  code: Int!
  message: String
  success: Boolean!
}

type CallResultOfCandidateResponse {
  code: Int!
  message: String
  result: CandidateResponse
  success: Boolean!
}

type CallResultOfClientResponse {
  code: Int!
  message: String
  result: ClientResponse
  success: Boolean!
}

type CallResultOfJobResponse {
  code: Int!
  message: String
  result: JobResponse
  success: Boolean!
}

type CallResultOfLoginResponse {
  code: Int!
  message: String
  result: LoginResponse
  success: Boolean!
}

type CallResultOfRoleResponse {
  code: Int!
  message: String
  result: RoleResponse
  success: Boolean!
}

type CallResultOfUserResponse {
  code: Int!
  message: String
  result: UserResponse
  success: Boolean!
}

type Candidate {
  assignments: [JobAssignment!]!
  createdAt: DateTime!
  email: String!
  experience: String
  id: Long!
  name: String!
  phone: String!
  skills: [String!]!
  updatedAt: DateTime!
  verified: Boolean!
}

input CandidateFilterInput {
  and: [CandidateFilterInput!]
  assignments: ListFilterInputTypeOfJobAssignmentFilterInput
  createdAt: DateTimeOperationFilterInput
  email: StringOperationFilterInput
  experience: StringOperationFilterInput
  id: LongOperationFilterInput
  name: StringOperationFilterInput
  or: [CandidateFilterInput!]
  phone: StringOperationFilterInput
  skills: ListStringOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  verified: BooleanOperationFilterInput
}

type CandidateResponse {
  createdAt: DateTime!
  email: String!
  experience: String
  id: Long!
  name: String!
  phone: String!
  skills: [String!]!
  updatedAt: DateTime!
  verified: Boolean!
}

input CandidateSortInput {
  createdAt: SortEnumType
  email: SortEnumType
  experience: SortEnumType
  id: SortEnumType
  name: SortEnumType
  phone: SortEnumType
  updatedAt: SortEnumType
  verified: SortEnumType
}

"""A segment of a collection."""
type CandidatesCollectionSegment {
  """A flattened list of the items."""
  items: [Candidate!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type Client {
  ceoFirstName: String!
  ceoLastName: String!
  companyAddress: String!
  companyEmail: String!
  companyLocation: String!
  companyLogo: String
  companyName: String!
  companyPhone: String!
  createdAt: DateTime!
  dateJoined: DateTime!
  id: Long!
  jobTitle: String
  jobs: [Job!]!
  linkedIn: String
  locationCoordinates: String
  logoBase64: String
  logoMimeType: String
  postalCode: String!
  registrationNumber: String!
  updatedAt: DateTime!
  verificationStatus: String!
  website: String
}

input ClientFilterInput {
  and: [ClientFilterInput!]
  ceoFirstName: StringOperationFilterInput
  ceoLastName: StringOperationFilterInput
  companyAddress: StringOperationFilterInput
  companyEmail: StringOperationFilterInput
  companyLocation: StringOperationFilterInput
  companyLogo: StringOperationFilterInput
  companyName: StringOperationFilterInput
  companyPhone: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  dateJoined: DateTimeOperationFilterInput
  id: LongOperationFilterInput
  jobTitle: StringOperationFilterInput
  jobs: ListFilterInputTypeOfJobFilterInput
  linkedIn: StringOperationFilterInput
  locationCoordinates: StringOperationFilterInput
  logoBase64: StringOperationFilterInput
  logoMimeType: StringOperationFilterInput
  or: [ClientFilterInput!]
  postalCode: StringOperationFilterInput
  registrationNumber: StringOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  verificationStatus: StringOperationFilterInput
  website: StringOperationFilterInput
}

type ClientResponse {
  ceoFirstName: String!
  ceoLastName: String!
  companyAddress: String!
  companyEmail: String!
  companyLocation: String!
  companyLogo: String
  companyName: String!
  companyPhone: String!
  createdAt: DateTime!
  dateJoined: DateTime!
  id: Long!
  jobTitle: String
  linkedIn: String
  locationCoordinates: String
  postalCode: String!
  registrationNumber: String!
  updatedAt: DateTime!
  verificationStatus: String!
  website: String
}

input ClientSortInput {
  ceoFirstName: SortEnumType
  ceoLastName: SortEnumType
  companyAddress: SortEnumType
  companyEmail: SortEnumType
  companyLocation: SortEnumType
  companyLogo: SortEnumType
  companyName: SortEnumType
  companyPhone: SortEnumType
  createdAt: SortEnumType
  dateJoined: SortEnumType
  id: SortEnumType
  jobTitle: SortEnumType
  linkedIn: SortEnumType
  locationCoordinates: SortEnumType
  logoBase64: SortEnumType
  logoMimeType: SortEnumType
  postalCode: SortEnumType
  registrationNumber: SortEnumType
  updatedAt: SortEnumType
  verificationStatus: SortEnumType
  website: SortEnumType
}

input ClientVStatusInput {
  id: Long!
  status: VerificationStatus!
}

"""A segment of a collection."""
type ClientsCollectionSegment {
  """A flattened list of the items."""
  items: [Client!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""Information about the offset pagination."""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

input CreateCandidateInput {
  input: CreateCandidateRequestInput!
}

input CreateCandidateRequestInput {
  email: String!
  experience: String
  name: String!
  phone: String!
  skills: [String!]!
}

input CreateClientInput {
  input: CreateClientRequestInput!
}

input CreateClientRequestInput {
  ceoFirstName: String!
  ceoLastName: String!
  companyAddress: String!
  companyEmail: String!
  companyLocation: String!
  companyLogo: String
  companyName: String!
  companyPhone: String!
  jobTitle: String
  linkedIn: String
  locationCoordinates: String
  logoImg: Upload
  postalCode: String!
  registrationNumber: String!
  verificationStatus: VerificationStatus! = PENDING
  website: String
}

input CreateJobInput {
  input: CreateJobRequestInput!
}

input CreateJobRequestInput {
  clientId: Long!
  duties: [String!]!
  jobHours: String!
  jobType: JobType!
  location: String!
  numberOfRoles: Int!
  paymentType: PaymentType!
  published: Boolean! = false
  requirements: [String!]!
  salaryPerAnnum: Decimal!
  startDate: DateTime!
  title: String!
}

input CreateRoleInput {
  input: CreateRoleRequestInput!
}

input CreateRoleRequestInput {
  description: String
  name: String!
  permissions: [String!]!
}

input CreateUserInput {
  input: CreateUserRequestInput!
}

input CreateUserRequestInput {
  email: String!
  password: String!
  roleId: Long!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

input DateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

"""The built-in `Decimal` scalar type."""
scalar Decimal

input DecimalOperationFilterInput {
  eq: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  neq: Decimal
  ngt: Decimal
  ngte: Decimal
  nin: [Decimal]
  nlt: Decimal
  nlte: Decimal
}

input DeleteAssignmentInput {
  candidateId: Long!
  jobId: Long!
}

input DeleteCandidateInput {
  id: Long!
}

input DeleteClientInput {
  id: Long!
}

input DeleteJobInput {
  id: Long!
}

input DeleteRoleInput {
  id: Long!
}

input DeleteUserInput {
  id: Long!
}

input GetUserByIdInput {
  id: Long!
}

input IntOperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int]
  nlt: Int
  nlte: Int
}

type Job {
  assignments: [JobAssignment!]!
  client: Client!
  clientId: Long!
  createdAt: DateTime!
  duties: [String!]!
  id: Long!
  jobHours: String!
  jobType: JobType!
  location: String!
  numberOfRoles: Int!
  paymentType: PaymentType!
  published: Boolean!
  requirements: [String!]!
  salaryPerAnnum: Decimal!
  startDate: DateTime!
  status: JobStatus!
  title: String!
  updatedAt: DateTime!
}

type JobAssignment {
  assignedAt: DateTime!
  candidate: Candidate!
  candidateId: Long!
  id: Long!
  job: Job!
  jobId: Long!
  status: AssignmentStatus!
}

input JobAssignmentFilterInput {
  and: [JobAssignmentFilterInput!]
  assignedAt: DateTimeOperationFilterInput
  candidate: CandidateFilterInput
  candidateId: LongOperationFilterInput
  id: LongOperationFilterInput
  job: JobFilterInput
  jobId: LongOperationFilterInput
  or: [JobAssignmentFilterInput!]
  status: AssignmentStatusOperationFilterInput
}

input JobAssignmentSortInput {
  assignedAt: SortEnumType
  candidate: CandidateSortInput
  candidateId: SortEnumType
  id: SortEnumType
  job: JobSortInput
  jobId: SortEnumType
  status: SortEnumType
}

"""A segment of a collection."""
type JobAssignmentsCollectionSegment {
  """A flattened list of the items."""
  items: [JobAssignment!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input JobFilterInput {
  and: [JobFilterInput!]
  assignments: ListFilterInputTypeOfJobAssignmentFilterInput
  client: ClientFilterInput
  clientId: LongOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  duties: ListStringOperationFilterInput
  id: LongOperationFilterInput
  jobHours: StringOperationFilterInput
  jobType: JobTypeOperationFilterInput
  location: StringOperationFilterInput
  numberOfRoles: IntOperationFilterInput
  or: [JobFilterInput!]
  paymentType: PaymentTypeOperationFilterInput
  published: BooleanOperationFilterInput
  requirements: ListStringOperationFilterInput
  salaryPerAnnum: DecimalOperationFilterInput
  startDate: DateTimeOperationFilterInput
  status: JobStatusOperationFilterInput
  title: StringOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

type JobResponse {
  clientId: Long!
  createdAt: DateTime!
  duties: [String!]!
  id: Long!
  jobHours: String!
  jobType: JobType!
  location: String!
  numberOfRoles: Int!
  paymentType: PaymentType!
  published: Boolean!
  requirements: [String!]!
  salaryPerAnnum: Decimal!
  startDate: DateTime!
  status: JobStatus!
  title: String!
  updatedAt: DateTime!
}

input JobSortInput {
  client: ClientSortInput
  clientId: SortEnumType
  createdAt: SortEnumType
  id: SortEnumType
  jobHours: SortEnumType
  jobType: SortEnumType
  location: SortEnumType
  numberOfRoles: SortEnumType
  paymentType: SortEnumType
  published: SortEnumType
  salaryPerAnnum: SortEnumType
  startDate: SortEnumType
  status: SortEnumType
  title: SortEnumType
  updatedAt: SortEnumType
}

enum JobStatus {
  ARCHIVED
  CLOSED
  DRAFT
  PUBLISHED
}

input JobStatusOperationFilterInput {
  eq: JobStatus
  in: [JobStatus!]
  neq: JobStatus
  nin: [JobStatus!]
}

enum JobType {
  CONTRACT
  INTERNSHIP
  PART_TIME
  PERMANENT
  TEMPORARY
}

input JobTypeOperationFilterInput {
  eq: JobType
  in: [JobType!]
  neq: JobType
  nin: [JobType!]
}

"""A segment of a collection."""
type JobsCollectionSegment {
  """A flattened list of the items."""
  items: [Job!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ListFilterInputTypeOfJobAssignmentFilterInput {
  all: JobAssignmentFilterInput
  any: Boolean
  none: JobAssignmentFilterInput
  some: JobAssignmentFilterInput
}

input ListFilterInputTypeOfJobFilterInput {
  all: JobFilterInput
  any: Boolean
  none: JobFilterInput
  some: JobFilterInput
}

input ListFilterInputTypeOfRolePermissionFilterInput {
  all: RolePermissionFilterInput
  any: Boolean
  none: RolePermissionFilterInput
  some: RolePermissionFilterInput
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  any: Boolean
  none: UserFilterInput
  some: UserFilterInput
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  any: Boolean
  none: StringOperationFilterInput
  some: StringOperationFilterInput
}

input LoginInput {
  input: LoginRequestInput!
}

input LoginRequestInput {
  email: String!
  password: String!
}

type LoginResponse {
  email: String!
  permissions: [String!]!
  role: String!
  token: String!
  userId: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

input LongOperationFilterInput {
  eq: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  neq: Long
  ngt: Long
  ngte: Long
  nin: [Long]
  nlt: Long
  nlte: Long
}

type Mutation {
  assignCandidateToJob(input: AssignCandidateToJobInput): CallResult
  assignJob(input: AssignJobInput): CallResult
  assignPermissions(input: AssignPermissionsInput): CallResult
  clientVStatus(input: ClientVStatusInput): CallResult
  createCandidate(input: CreateCandidateInput): CallResultOfCandidateResponse
  createClient(input: CreateClientInput): CallResultOfClientResponse
  createJob(input: CreateJobInput): CallResultOfJobResponse
  createRole(input: CreateRoleInput): CallResultOfRoleResponse
  createUser(input: CreateUserInput): CallResultOfUserResponse
  deleteAssignment(input: DeleteAssignmentInput): CallResult
  deleteCandidate(input: DeleteCandidateInput): CallResult
  deleteClient(input: DeleteClientInput): CallResult
  deleteJob(input: DeleteJobInput): CallResult
  deleteRole(input: DeleteRoleInput): CallResult
  deleteUser(input: DeleteUserInput): CallResult
  login(input: LoginInput): CallResultOfLoginResponse
  publishJob(input: PublishJobInput): CallResult
  revokePermissions(input: RevokePermissionsInput): CallResult
  updateAssignmentStatus(input: UpdateAssignmentStatusInput): CallResult
  updateCandidate(input: UpdateCandidateInput): CallResultOfCandidateResponse
  updateClient(input: UpdateClientInput): CallResultOfClientResponse
  updateJob(input: UpdateJobInput): CallResultOfJobResponse
  updateRole(input: UpdateRoleInput): CallResultOfRoleResponse
  updateUser(input: UpdateUserInput): CallResultOfUserResponse
  verifyCandidate(input: VerifyCandidateInput): CallResult
}

enum PaymentType {
  DAILY
  MONTHLY
  PER_ANNUM
  PER_HOUR
  PROJECT_BASED
}

input PaymentTypeOperationFilterInput {
  eq: PaymentType
  in: [PaymentType!]
  neq: PaymentType
  nin: [PaymentType!]
}

type Permission {
  description: String
  name: String!
  rolePermissions: [RolePermission!]!
}

input PermissionFilterInput {
  and: [PermissionFilterInput!]
  description: StringOperationFilterInput
  name: StringOperationFilterInput
  or: [PermissionFilterInput!]
  rolePermissions: ListFilterInputTypeOfRolePermissionFilterInput
}

input PermissionSortInput {
  description: SortEnumType
  name: SortEnumType
}

"""A segment of a collection."""
type PermissionsCollectionSegment {
  """A flattened list of the items."""
  items: [Permission!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input PublishJobInput {
  id: Long!
}

type Query {
  candidates(order: [CandidateSortInput!], skip: Int, take: Int, where: CandidateFilterInput): CandidatesCollectionSegment
  clients(order: [ClientSortInput!], skip: Int, take: Int, where: ClientFilterInput): ClientsCollectionSegment
  jobAssignments(order: [JobAssignmentSortInput!], skip: Int, take: Int, where: JobAssignmentFilterInput): JobAssignmentsCollectionSegment
  jobs(order: [JobSortInput!], skip: Int, take: Int, where: JobFilterInput): JobsCollectionSegment
  permissions(order: [PermissionSortInput!], skip: Int, take: Int, where: PermissionFilterInput): PermissionsCollectionSegment
  roles(order: [RoleSortInput!], skip: Int, take: Int, where: RoleFilterInput): RolesCollectionSegment
  userById(input: GetUserByIdInput): CallResultOfUserResponse
  users(order: [UserSortInput!], skip: Int, take: Int, where: UserFilterInput): UsersCollectionSegment
}

input RevokePermissionsInput {
  input: AssignPermissionsRequestInput!
}

type Role {
  createdAt: DateTime!
  description: String
  id: Long!
  isActive: Boolean!
  name: String!
  rolePermissions: [RolePermission!]!
  updatedAt: DateTime!
  users: [User!]!
}

input RoleFilterInput {
  and: [RoleFilterInput!]
  createdAt: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  id: LongOperationFilterInput
  isActive: BooleanOperationFilterInput
  name: StringOperationFilterInput
  or: [RoleFilterInput!]
  rolePermissions: ListFilterInputTypeOfRolePermissionFilterInput
  updatedAt: DateTimeOperationFilterInput
  users: ListFilterInputTypeOfUserFilterInput
}

type RolePermission {
  id: Long!
  permission: Permission!
  permissionName: String!
  role: Role!
  roleId: Long!
}

input RolePermissionFilterInput {
  and: [RolePermissionFilterInput!]
  id: LongOperationFilterInput
  or: [RolePermissionFilterInput!]
  permission: PermissionFilterInput
  permissionName: StringOperationFilterInput
  role: RoleFilterInput
  roleId: LongOperationFilterInput
}

type RoleResponse {
  createdAt: DateTime!
  description: String
  id: Long!
  isActive: Boolean!
  name: String!
  permissions: [String!]!
  updatedAt: DateTime!
}

input RoleSortInput {
  createdAt: SortEnumType
  description: SortEnumType
  id: SortEnumType
  isActive: SortEnumType
  name: SortEnumType
  updatedAt: SortEnumType
}

"""A segment of a collection."""
type RolesCollectionSegment {
  """A flattened list of the items."""
  items: [Role!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

enum SortEnumType {
  ASC
  DESC
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

input UpdateAssignmentStatusInput {
  candidateId: Long!
  jobId: Long!
  status: AssignmentStatus!
}

input UpdateCandidateInput {
  id: Long!
  input: UpdateCandidateRequestInput!
}

input UpdateCandidateRequestInput {
  email: String
  experience: String
  name: String
  phone: String
  skills: [String!]
}

input UpdateClientInput {
  id: Long!
  input: UpdateClientRequestInput!
}

input UpdateClientRequestInput {
  ceoFirstName: String
  ceoLastName: String
  companyAddress: String
  companyEmail: String
  companyLocation: String
  companyLogo: String
  companyName: String
  companyPhone: String
  jobTitle: String
  linkedIn: String
  locationCoordinates: String
  logoImg: Upload
  postalCode: String
  registrationNumber: String
  website: String
}

input UpdateJobInput {
  id: Long!
  input: UpdateJobRequestInput!
}

input UpdateJobRequestInput {
  duties: [String!]
  jobHours: String
  jobType: JobType
  location: String
  numberOfRoles: Int
  paymentType: PaymentType
  published: Boolean
  requirements: [String!]
  salaryPerAnnum: Decimal
  startDate: DateTime
  title: String
}

input UpdateRoleInput {
  id: Long!
  input: CreateRoleRequestInput!
}

input UpdateUserInput {
  id: Long!
  input: UpdateUserRequestInput!
}

input UpdateUserRequestInput {
  email: String
  password: String
  roleId: Long
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  email: String!
  id: Long!
  password: String!
  role: Role
  roleId: Long!
  updatedAt: DateTime!
}

input UserFilterInput {
  and: [UserFilterInput!]
  createdAt: DateTimeOperationFilterInput
  email: StringOperationFilterInput
  id: LongOperationFilterInput
  or: [UserFilterInput!]
  password: StringOperationFilterInput
  role: RoleFilterInput
  roleId: LongOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

type UserResponse {
  createdAt: DateTime!
  email: String!
  id: Long!
  roleId: Long!
  roleName: String!
  updatedAt: DateTime!
}

input UserSortInput {
  createdAt: SortEnumType
  email: SortEnumType
  id: SortEnumType
  password: SortEnumType
  role: RoleSortInput
  roleId: SortEnumType
  updatedAt: SortEnumType
}

"""A segment of a collection."""
type UsersCollectionSegment {
  """A flattened list of the items."""
  items: [User!]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

enum VerificationStatus {
  PENDING
  REJECTED
  SUSPENDED
  VERIFIED
}

input VerifyCandidateInput {
  id: Long!
}
